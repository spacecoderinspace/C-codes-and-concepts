/*
Question. what is difference between Overloading as member function and overloading using 
friend function ???

============
answer:-

The primary difference between overloading operators using the scope resolution operator and 
friend functions lies in how they are implemented and how they interact with the class's members.
Here’s an in-depth comparison:

1. Overloading with Member Functions (Using Scope Resolution ::):
Syntax: The operator is implemented as a member function inside the class.

Access: A member function has direct access to the private and protected members of the class.

Usage:

The left-hand operand must be an instance of the class when overloading using a member function.
Typically used for unary or binary operators when the left-hand operand is an object of the class.
Example:--

class complex {
    int real, img;
public:
    complex(int r = 0, int i = 0) : real(r), img(i) {}

    // Overloading `+` as a member function
    complex operator+(const complex& other) const {
        return complex(real + other.real, img + other.img);
    }
};

int main() {
    complex c1(3, 7), c2(5, 4);
    complex c3 = c1 + c2;  // Works because `+` is a member function of `complex`
}

Advantages:

Easier to implement when the left-hand operand is an instance of the class.
Direct access to this pointer and member variables.
Limitations:

Can only be used when the left-hand operand is an object of the class.
2. Overloading with Friend Functions:
Syntax: The operator is implemented outside the class but is declared as a friend inside the class.

Access: A friend function can access the private and protected members of the class, even though 
it is not a member of the class.

Usage:

Can be used when either operand needs to be of a different type or when the left-hand operand is 
not an instance of the class.
Suitable for symmetric operators like +, -, or when an external function is required to operate 
on two different types.

Example:

class complex {
    int real, img;
public:
    complex(int r = 0, int i = 0) : real(r), img(i) {}

    // Friend function declaration
    friend complex operator+(const complex& c1, const complex& c2);
};

// Overloading `+` as a friend function
complex operator+(const complex& c1, const complex& c2) {
    return complex(c1.real + c2.real, c1.img + c2.img);
}

int main() {
    complex c1(3, 7), c2(5, 4);
    complex c3 = c1 + c2;  // Works because `+` is a friend function
}

Advantages:

More flexible in terms of operand types. Can be used to enable operations between different classes 
or types (e.g., complex + int).
Does not require the left-hand operand to be an instance of the class, enabling symmetric behavior 
for binary operators.
Limitations:

Slightly less encapsulated, as it’s implemented outside the class definition.
May not have direct access to this pointer (because it’s not a member function).
When to Use Which:
Member Function (::):

Use when you only need to access the class’s own members or when the left-hand operand is always an 
instance of the class.
Useful for unary operators or when overloading operators that modify the calling object (e.g., ++).
Friend Function:

Use when you need more flexibility with operand types or when the operator should be symmetric and 
not necessarily tied to a specific class instance.
Useful for binary operators where you need to access private members of two different classes.
Example of Non-Member Use Case:
Suppose you need to add a complex number and an int. A friend function allows:


i.e. choose member functions for simplicity when possible and use friend functions when flexibility 
or access to multiple objects' private data is needed.







*/